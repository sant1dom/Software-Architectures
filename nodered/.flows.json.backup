[
    {
        "id": "73a28a44.f3c3b4",
        "type": "tab",
        "label": "Simulate Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "37b52a88de293bcd",
        "type": "kafka-broker",
        "name": "Local",
        "hosts": "broker:29092",
        "selfsign": false,
        "usetls": false,
        "cacert": "",
        "clientcert": "",
        "privatekey": "",
        "passphrase": ""
    },
    {
        "id": "bc65738dadc6a2f0",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "854a8adda0f0b176",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e936c8f8.d1f108",
        "type": "inject",
        "z": "73a28a44.f3c3b4",
        "name": "Add House",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "34568affb51ccb67"
            ]
        ]
    },
    {
        "id": "4aa66ec45b6fd43a",
        "type": "kafka-producer",
        "z": "73a28a44.f3c3b4",
        "name": "",
        "broker": "37b52a88de293bcd",
        "topic": "houses",
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "attributes": 0,
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "5b16ed9f7c633ca0",
        "type": "debug",
        "z": "73a28a44.f3c3b4",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 400,
        "wires": []
    },
    {
        "id": "df9c2125.7d1d65",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "House df9c2125.7d1d65",
        "func": "msg.payload.powerforecast = Math.abs(msg.payload.powerforecast + Math.random());\nmsg.payload = '{\"energy_production\": ' + msg.payload.powerforecast + ', \"energy_consumption\": ' + global.get(\"housePowerConsumption\")(new Date()) + ', \"house_id\":140 }';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "5b16ed9f7c633ca0",
                "4aa66ec45b6fd43a"
            ]
        ]
    },
    {
        "id": ".1d79ddf25512c6",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "House .1d79ddf25512c6",
        "func": "msg.payload.powerforecast = Math.abs(msg.payload.powerforecast + Math.random());\nmsg.payload = '{\"energy_production\": ' + msg.payload.powerforecast + ', \"energy_consumption\": ' + global.get(\"housePowerConsumption\")(new Date()) + ', \"house_id\":141 }';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "4aa66ec45b6fd43a",
                "5b16ed9f7c633ca0"
            ]
        ]
    },
    {
        "id": "15cf2.dd912756d",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "House 15cf2.dd912756d",
        "func": "msg.payload.powerforecast = Math.abs(msg.payload.powerforecast + Math.random());\nmsg.payload = '{\"energy_production\": ' + msg.payload.powerforecast + ', \"energy_consumption\": ' + global.get(\"housePowerConsumption\")(new Date()) +', \"house_id\":142 }';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 380,
        "wires": [
            [
                "4aa66ec45b6fd43a",
                "5b16ed9f7c633ca0"
            ]
        ]
    },
    {
        "id": "221f67d5.d51d9c",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "House 221f67d5.d51d9c",
        "func": "msg.payload.powerforecast = Math.abs(msg.payload.powerforecast + Math.random());\nmsg.payload = '{\"energy_production\": ' + msg.payload.powerforecast + ', \"energy_consumption\": ' + global.get(\"housePowerConsumption\")(new Date()) + ', \"house_id\":143 }';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "4aa66ec45b6fd43a",
                "5b16ed9f7c633ca0"
            ]
        ]
    },
    {
        "id": "d1292.57cfd615d",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "House d1292.57cfd615d",
        "func": "msg.payload.powerforecast = Math.abs(msg.payload.powerforecast + Math.random());\nmsg.payload = '{\"energy_production\": ' + msg.payload.powerforecast + ', \"energy_consumption\": ' + global.get(\"housePowerConsumption\")(new Date()) + ', \"house_id\":144 }';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "4aa66ec45b6fd43a",
                "5b16ed9f7c633ca0"
            ]
        ]
    },
    {
        "id": "34568affb51ccb67",
        "type": "solar power forecast",
        "z": "73a28a44.f3c3b4",
        "name": "",
        "lat": "42.32",
        "lon": "14.14",
        "tilt": "42",
        "orientation": "180",
        "altitude": "0",
        "area": "1",
        "number": "3",
        "efficiency": "0.20",
        "x": 180,
        "y": 340,
        "wires": [
            [
                ".1d79ddf25512c6",
                "15cf2.dd912756d",
                "d1292.57cfd615d",
                "221f67d5.d51d9c",
                "df9c2125.7d1d65",
                "5b16ed9f7c633ca0"
            ]
        ]
    },
    {
        "id": "3fdde2f45d3669d8",
        "type": "function",
        "z": "73a28a44.f3c3b4",
        "name": "housePowerConsumption",
        "func": "var housePowerConsumption = function (timestamp) {\n    let hour = timestamp.getHours();\n    let minute = timestamp.getMinutes();\n    let consumption = 0;\n\n    // Morning (6am to 9am)\n    if (hour >= 6 && hour < 9) {\n        consumption = 1 + Math.random() * 1 + (hour - 6) * 0.5 + (minute / 60) * 0.5;\n    }\n    // Afternoon (12pm to 2pm)\n    else if (hour >= 12 && hour < 14) {\n        consumption = 1 + Math.random() * 0.5 + (hour - 12) * 0.25 + (minute / 60) * 0.25;\n    }\n    // Evening (6pm to 10pm)\n    else if (hour >= 18 && hour < 22) {\n        consumption = 1 + Math.random() * 1 + (hour - 18) * 0.5 + (minute / 60) * 0.5;\n    }\n    // Night (10pm to 6am)\n    else {\n        consumption = 0.5 + Math.random() * 0.5;\n    }\n\n    return consumption;\n}\n\nglobal.set(\"housePowerConsumption\", housePowerConsumption);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "var housePowerConsumption = function (timestamp) {\n    let hour = timestamp.getHours();\n    let minute = timestamp.getMinutes();\n    let consumption = 0;\n\n    // Morning (6am to 9am)\n    if (hour >= 6 && hour < 9) {\n        consumption = 1 + Math.random() * 1 + (hour - 6) * 0.5 + (minute / 60) * 0.5;\n    }\n    // Afternoon (12pm to 2pm)\n    else if (hour >= 12 && hour < 14) {\n        consumption = 1 + Math.random() * 0.5 + (hour - 12) * 0.25 + (minute / 60) * 0.25;\n    }\n    // Evening (6pm to 10pm)\n    else if (hour >= 18 && hour < 22) {\n        consumption = 1 + Math.random() * 1 + (hour - 18) * 0.5 + (minute / 60) * 0.5;\n    }\n    // Night (10pm to 6am)\n    else {\n        consumption = 0.5 + Math.random() * 0.5;\n    }\n\n    return consumption;\n}\n\nglobal.set(\"housePowerConsumption\", housePowerConsumption);",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 120,
        "wires": [
            []
        ]
    }
]